{"version":3,"sources":["services/ApiService.js","views/app-views/profile/index.js"],"names":["ApiService","data","id","fetch","url","method","headers","Profile","dispatch","useDispatch","useState","mode","setMode","image","setImage","userInfo","useSelector","state","auth","useEffect","console","log","env","API_ENDPOINT_URL","avatar","imageCropActions","CloseOutlined","className","style","color","fontSize","CONSTANTS","STYLES","ICON_SIZE","CheckOutlined","backgroundColor","padding","SPACING","borderRadius","BORDER_RADIUS","marginRight","marginLeft","marginBottom","title","width","height","margin","backgroundImage","backgroundSize","text","actions","icon","CameraFilled","maxSize","apply","event","blobFile","reader","FileReader","readAsDataURL","onload","e","target","result","Socket","emitUpdateUserProfileImage","_id","avatarId","isBack","rootStyle","overflow","name","labelCol","span","wrapperCol","initialValues","remember","onFinish","values","updateUser","fullName","firstName","lastName","then","res","success","setUserInfo","user","notification","message","error","onFinishFailed","errorInfo","colon","preserve","requiredMark","scrollToFirstError","Item","label","rules","required","initialValue","disabled","email","offset","type","onClick","htmlType"],"mappings":"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","file":"static/js/9.a9da0e59.chunk.js","sourcesContent":["import fetch from 'auth/FetchInterceptor'\r\n\r\nconst ApiService = {}\r\n\r\nApiService.updateUser = (data, id)=>{\r\n  return fetch({\r\n    url: `/users/${id}`,\r\n    method: 'put',\r\n    headers: {},\r\n    data: data\r\n  })\r\n}\r\n\r\nexport default ApiService\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {PageHeader, Input, Form, Button, Checkbox, notification, Image} from \"antd\";\r\nimport CONSTANTS from \"../../../utils/constants\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport ApiService from \"../../../services/ApiService\";\r\nimport {setUserInfo} from \"../../../redux/actions/Auth\";\r\nimport './index.css'\r\nimport ImgCrop from 'antd-img-crop';\r\nimport {CameraFilled, CloseOutlined, CheckOutlined} from '@ant-design/icons'\r\nimport AvatarImageCropper from \"react-avatar-image-cropper/lib/react-avatar-image-cropper\";\r\nimport Utils from \"../../../utils\";\r\nimport Socket from \"../../../socket/Socket\";\r\nimport {env} from \"../../../configs/EnvironmentConfig\";\r\n\r\nconst Profile = () => {\r\n  const dispatch = useDispatch()\r\n  const [data, setData] = useState({})\r\n  const [mode, setMode] = useState(\"view\")\r\n  const [image, setImage] = useState(\"\")\r\n  const userInfo = useSelector(state => {\r\n    return state.auth.userInfo\r\n  })\r\n\r\n  useEffect(() => {\r\n    console.log({userInfo})\r\n    setImage(env.API_ENDPOINT_URL + '/' + userInfo.avatar.url)\r\n  }, [userInfo])\r\n\r\n  const onEdit = () => {\r\n    setMode(\"edit\")\r\n  }\r\n\r\n  const onCancel = () => {\r\n    setMode(\"view\")\r\n  }\r\n\r\n  const onFinish = (values) => {\r\n    console.log('Success:', values);\r\n    ApiService.updateUser({...values, fullName: values.firstName + \" \" + values.lastName}, userInfo._id).then(res => {\r\n      if (res?.success) {\r\n        dispatch(setUserInfo(res.data.user))\r\n        notification.success({\r\n          message: res.message,\r\n        })\r\n      } else {\r\n        notification.error({\r\n          message: res?.message ?? \"Error while updating\",\r\n        })\r\n      }\r\n      setMode(\"view\")\r\n\r\n\r\n    })\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    let files = event.target.files\r\n    let reader = new FileReader()\r\n    reader.onload = (e) => {\r\n      console.log({readerEvent: e.target.result})\r\n      setImage(e.target.result)\r\n    }\r\n    reader.readAsDataURL(files[0])\r\n    console.log({files, reader})\r\n\r\n  }\r\n\r\n  const imageCropActions = [\r\n    <CloseOutlined className={'align-self-center mr-1 ml-1'} key={0}\r\n                   style={{color: '#fff', fontSize: CONSTANTS.STYLES.ICON_SIZE * 1.5}}/>,\r\n    <CheckOutlined className={'align-self-center mr-1 ml-1'} key={1}\r\n                   style={{color: '#fff', fontSize: CONSTANTS.STYLES.ICON_SIZE * 1.5}}/>,\r\n    // <button key={0}>test_cancel</button>,\r\n    // <button key={1}>test_apply</button>,\r\n  ]\r\n\r\n  const onApply = (event) => {\r\n    console.log(\"Apply event: \", event)\r\n    const blobFile = event\r\n    let reader = new FileReader()\r\n    reader.readAsDataURL(blobFile)\r\n    reader.onload = (e) => {\r\n      // const buffer = e.target.result\r\n      // const convertedBuffer = Utils.convertBufferToUrl(buffer)\r\n      // console.log({buffer, convertedBuffer})\r\n      // setImage(convertedBuffer)\r\n      console.log(\"Image: \", e.target.result)\r\n      Socket.emitUpdateUserProfileImage({\r\n        _id: userInfo._id,\r\n        avatarId: userInfo.avatar._id,\r\n        data: e.target.result\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{\r\n      backgroundColor: '#fff',\r\n      padding: CONSTANTS.STYLES.SPACING,\r\n      borderRadius: CONSTANTS.STYLES.BORDER_RADIUS,\r\n      marginRight: CONSTANTS.STYLES.SPACING,\r\n      marginLeft: CONSTANTS.STYLES.SPACING,\r\n      marginBottom: CONSTANTS.STYLES.SPACING\r\n    }}>\r\n      <PageHeader\r\n        title={\"My Profile\"}\r\n      />\r\n      {/*{image && <Image width={200} src={image}/>}*/}\r\n      {/*<ImgCrop rotate >*/}\r\n      {/*  <Input type={'file'} onChange={onChange}/>*/}\r\n\r\n      {/*</ImgCrop>*/}\r\n      <div className={'avatar-cropper-container'} style={{\r\n        width: 260,\r\n        height: 260,\r\n        margin: \"auto\",\r\n        backgroundImage: `url(\"${image}\")`,\r\n        backgroundSize: 'contain'\r\n        // backgroundPosition: 'center',\r\n      }}>\r\n        <AvatarImageCropper\r\n          text={\"Change your Avatar\"}\r\n          actions={imageCropActions}\r\n          icon={<CameraFilled style={{color: '#fff', fontSize: CONSTANTS.STYLES.ICON_SIZE * 2.5}}/>}\r\n          maxSize={1024 * 1024 * 2}\r\n          apply={onApply}\r\n          isBack={true}\r\n          rootStyle={{\r\n            borderRadius: '100%',\r\n            overflow: 'hidden'\r\n          }}\r\n        />\r\n      </div>\r\n      <Form\r\n        className={'mt-5'}\r\n        name=\"basic\"\r\n        labelCol={{span: 8}}\r\n        wrapperCol={{span: 16}}\r\n        initialValues={{remember: true}}\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n        colon={false}\r\n        preserve={false}\r\n        requiredMark={false}\r\n        scrollToFirstError={true}\r\n      >\r\n        <Form.Item\r\n          label=\"First name\"\r\n          name=\"firstName\"\r\n          rules={[{required: true, message: 'Please input your first name!'}]}\r\n          initialValue={userInfo.firstName}\r\n        >\r\n          <Input disabled={mode === \"view\"}/>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Last name\"\r\n          name=\"lastName\"\r\n          rules={[{required: true, message: 'Please input your last name!'}]}\r\n          initialValue={userInfo.lastName}\r\n        >\r\n          <Input disabled={mode === \"view\"}/>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Email\"\r\n          name=\"email\"\r\n          rules={[{required: true, message: 'Please input your email!'}]}\r\n          initialValue={userInfo.email}\r\n        >\r\n          <Input disabled={mode === \"view\"}/>\r\n        </Form.Item>\r\n\r\n        <Form.Item wrapperCol={{offset: 8, span: 16}}>\r\n          {mode === \"view\" ? (\r\n            <Button type=\"primary\" onClick={onEdit}>\r\n              Edit\r\n            </Button>\r\n          ) : (\r\n            <>\r\n              <Button htmlType=\"button\" style={{margin: '0 8px'}} onClick={onCancel} type={'danger'}>\r\n                Cancel\r\n              </Button>\r\n              <Button htmlType=\"submit\" type=\"primary\">\r\n                Save\r\n              </Button>\r\n\r\n            </>\r\n          )}\r\n\r\n        </Form.Item>\r\n      </Form>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile\r\n"],"sourceRoot":""}